
==================== FINAL INTERFACE ====================
2017-11-25 15:39:05.927001 UTC

interface main@main:Transforms 8002
  interface hash: 53f3ebf3819421b8ed436365ed85ff19
  ABI hash: 311bb696289916a1c46094e447592883
  export-list hash: 58a8a9d40e2a61427fd2453344649137
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 52e25017ea2471189bd6f9d9f6dbdebf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Transforms.<+>
  Transforms.identity
  Transforms.rotate
  Transforms.scale
  Transforms.skewX
  Transforms.skewY
  Transforms.transform
  Transforms.translate
  Transforms.Transform{Transforms.Compose Transforms.Identity Transforms.Rotate Transforms.Scale Transforms.SkewX Transforms.SkewY Transforms.Translate}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-markup-0.8.0.0@blaze-markup-0.8.0.0-GsxkVbRgODkgUQDmmDVob
                      blaze-svg-0.3.6.1@blaze-svg-0.3.6.1-E6CYGgfBIFH476loEvWeGj
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  blaze-markup-0.8.0.0@blaze-markup-0.8.0.0-GsxkVbRgODkgUQDmmDVob:Text.Blaze.Internal c1d6ebf18cc7de440fbc2d1a2a795843
import  -/  blaze-svg-0.3.6.1@blaze-svg-0.3.6.1-E6CYGgfBIFH476loEvWeGj:Text.Blaze.Svg.Internal cffc7b1bca7b3586ae25aeb718abb55b
import  -/  blaze-svg-0.3.6.1@blaze-svg-0.3.6.1-E6CYGgfBIFH476loEvWeGj:Text.Blaze.Svg11 ffe4dbf1048c9a6d5d9dad94ecced8e8
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform :: GHC.Read.Read Transforms.Transform
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Transforms.Transform
                  Transforms.$fReadTransform_$creadsPrec
                  Transforms.$fReadTransform_$creadList
                  Transforms.$fReadTransform_$creadPrec
                  Transforms.$fReadTransform_$creadListPrec -}
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Transforms.Transform] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Transforms.Transform]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Transforms.Transform
                   Transforms.$fReadTransform2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Transforms.Transform>_R))
                   eta
                   @ b
                   eta1) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Transforms.Transform
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Transforms.Transform
                   Transforms.$fReadTransform3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Transforms.Transform>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Transforms.Transform>_R)))) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Transforms.Transform -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Transforms.Transform
                           -> Text.ParserCombinators.ReadP.P b) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b = eta Transforms.Identity
                     } in
                     Text.Read.Lex.expect2
                       @ b
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Transforms.$fReadTransform4 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                   @ b
                   (Text.ParserCombinators.ReadP.Look
                      @ b
                      (\ (a :: GHC.Base.String) ->
                       (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                         `cast`
                       (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                         @ b
                         k))
                   (case n of ww { GHC.Types.I# ww2 ->
                    Transforms.$w$creadPrec ww2 @ b eta })) -}
0a7c48b65121e6c0a0aaf2edb9ac29c9
  $fReadTransform4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Identity"#) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform5 ::
    Text.ParserCombinators.ReadP.P [Transforms.Transform]
  {- Unfolding: (GHC.Read.list1
                   @ Transforms.Transform
                   Transforms.$fReadTransform2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Transforms.Transform>_R))
                   GHC.Read.$fRead()5
                   @ [Transforms.Transform]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Transforms.Transform])) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Transforms.Transform]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Transforms.Transform]
                   Transforms.$fReadTransform5) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Transforms.Transform]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Transforms.$fReadTransform1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Transforms.Transform]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Transforms.Transform]>_R))) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Transforms.Transform
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Transforms.$fReadTransform2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Transforms.Transform>_R)) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fReadTransform_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Transforms.Transform
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Transforms.Transform
                   ((GHC.Read.parens1
                       @ Transforms.Transform
                       Transforms.$fReadTransform3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Transforms.Transform>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Transforms.Transform>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Transforms.Transform>_R)
                      @ Transforms.Transform
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Transforms.Transform))) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fShowTransform :: GHC.Show.Show Transforms.Transform
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Transforms.Transform
                  Transforms.$fShowTransform_$cshowsPrec
                  Transforms.$fShowTransform_$cshow
                  Transforms.$fShowTransform_$cshowList -}
ab4213368e5e2fdf961cc864d25fb53d
  $fShowTransform1 :: Transforms.Transform -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Transforms.$fShowTransform_$cshowsPrec
                   Transforms.$fShowTransform2) -}
fd72d7ca1107fd2dd4576a119efb1415
  $fShowTransform2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fShowTransform_$cshow :: Transforms.Transform -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Transforms.Transform) ->
                 Transforms.$fShowTransform_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fShowTransform_$cshowList ::
    [Transforms.Transform] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Transforms.Transform
                   Transforms.$fShowTransform1) -}
ab4213368e5e2fdf961cc864d25fb53d
  $fShowTransform_$cshowsPrec ::
    GHC.Types.Int -> Transforms.Transform -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
c81fdfc9998d7bb623014d1dc1d0f5f6
  $tc'Compose :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3548822966208402595##
                   8866752558497881749##
                   Transforms.$trModule
                   Transforms.$tc'Compose1) -}
e086c7b681f0d591f184967451f5e99e
  $tc'Compose1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Compose"#) -}
1a3d22677b483a1588b8c000cd4de182
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3939591534844705896##
                   11118291998379647507##
                   Transforms.$trModule
                   Transforms.$tc'Identity1) -}
3c916b09bf207f4dc7fd3feee45afb3f
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
fed35614a649606bcdcece0104f7bf28
  $tc'Rotate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13253916111505157431##
                   1856633013025085160##
                   Transforms.$trModule
                   Transforms.$tc'Rotate1) -}
d9fe4af8a679eb9e72c46c8a0376b5a2
  $tc'Rotate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rotate"#) -}
11c11a7c088d67fb641dcbc6124c63f1
  $tc'Scale :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11725922796291930453##
                   267932657897109840##
                   Transforms.$trModule
                   Transforms.$tc'Scale1) -}
ec3777ddacb663fc47c2ebc78240762d
  $tc'Scale1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scale"#) -}
04067012aeac67759011ec8f7f3d7845
  $tc'SkewX :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13747302253698977559##
                   17597601911396239671##
                   Transforms.$trModule
                   Transforms.$tc'SkewX1) -}
e34552d66c43261fd1470ccef2be0052
  $tc'SkewX1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SkewX"#) -}
d166078e8e8c2359c2411e9d4e96d034
  $tc'SkewY :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5032255226114197283##
                   18232713141368841595##
                   Transforms.$trModule
                   Transforms.$tc'SkewY1) -}
43bdb7a22925c0b9b1da4a678f63bcb9
  $tc'SkewY1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SkewY"#) -}
eab3ece5465b4cf04a8ff0767aa41a1a
  $tc'Translate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15761849567323924902##
                   13249186897029795717##
                   Transforms.$trModule
                   Transforms.$tc'Translate1) -}
423ef28335ff84c41262aa145b3dac69
  $tc'Translate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Translate"#) -}
0ee9846c73ccb985da339404920b5667
  $tcTransform :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10159700887433744750##
                   9065510753603315745##
                   Transforms.$trModule
                   Transforms.$tcTransform1) -}
a2ab0d32bea49efcae1701a70d79c97b
  $tcTransform1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Transform"#) -}
dee7db1287e76c203fa666c9efbd9a58
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Transforms.$trModule2
                   Transforms.$trModule1) -}
6b9ba9ae5a68d00bd3d4b91c355dc050
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Transforms"#) -}
af449b81ddf7ac9fbfccf7593dc1dbeb
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
ab4213368e5e2fdf961cc864d25fb53d
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Transforms.Transform -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
3a25b6996f971a23df6b4c203efc2069
  (<+>) ::
    Transforms.Transform
    -> Transforms.Transform -> Transforms.Transform
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m7,
     Unfolding: InlineRule (0, True, True) Transforms.Compose -}
ab4213368e5e2fdf961cc864d25fb53d
  data Transform
    = Identity
    | Translate GHC.Types.Double GHC.Types.Double
    | Scale GHC.Types.Double GHC.Types.Double
    | Rotate GHC.Types.Double
    | SkewX GHC.Types.Double
    | SkewY GHC.Types.Double
    | Compose Transforms.Transform Transforms.Transform
7867c2a4ca0d50e845167ae90587c867
  identity :: Transforms.Transform
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Transforms.Identity -}
1a4c1978d6e675fd5b422a37b6bc1559
  rotate :: t -> GHC.Types.Double -> Transforms.Transform
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t (angle :: t) (eta :: GHC.Types.Double) ->
                 Transforms.Rotate eta) -}
0cd70ef9e51e180342ec502b05ae71d9
  scale ::
    GHC.Types.Double -> GHC.Types.Double -> Transforms.Transform
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True) Transforms.Scale -}
450fa04cd14c1a0a08c013d0dc2c5da1
  skewX :: GHC.Types.Double -> Transforms.Transform
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m5,
     Unfolding: InlineRule (0, True, True) Transforms.SkewX -}
09708761beded3c178923fbbf5418566
  skewY :: GHC.Types.Double -> Transforms.Transform
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m6,
     Unfolding: InlineRule (0, True, True) Transforms.SkewY -}
5013d85750eeb3a66698d97a2e111d52
  transform ::
    Transforms.Transform -> [Text.Blaze.Internal.AttributeValue]
  {- Arity: 1, Strictness: <S,1*U> -}
403b97b09038baa701e72c47a676ccb7
  translate ::
    GHC.Types.Double -> GHC.Types.Double -> Transforms.Transform
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True) Transforms.Translate -}
instance GHC.Read.Read [Transforms.Transform]
  = Transforms.$fReadTransform
instance GHC.Show.Show [Transforms.Transform]
  = Transforms.$fShowTransform
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

