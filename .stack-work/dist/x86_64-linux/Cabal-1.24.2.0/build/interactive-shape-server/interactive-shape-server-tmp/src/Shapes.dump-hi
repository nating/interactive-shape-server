
==================== FINAL INTERFACE ====================
2017-11-25 21:54:15.949804 UTC

interface main@main:Shapes 8002
  interface hash: a242e607385696ad11765634523f2dec
  ABI hash: 9576589d5342d91c929eec106cef4bf1
  export-list hash: 409bd3ad84d0f03b355ec262ec78263e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fc9257de8ff58d53e4316ecfa588732f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Shapes.Shape{Shapes.Circle Shapes.Empty Shapes.Square}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
a70891e3593f81ed111926db922174f5
  $fReadShape :: GHC.Read.Read Shapes.Shape
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Shape
                  Shapes.$fReadShape_$creadsPrec
                  Shapes.$fReadShape_$creadList
                  Shapes.$fReadShape_$creadPrec
                  Shapes.$fReadShape_$creadListPrec -}
a70891e3593f81ed111926db922174f5
  $fReadShape1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Shapes.Shape] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Shapes.Shape] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Shapes.Shape
                   Shapes.$fReadShape2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Shape>_R))
                   eta
                   @ b
                   eta1) -}
a70891e3593f81ed111926db922174f5
  $fReadShape10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
  {- Strictness: m,
     Unfolding: ((Shapes.$fReadShape12,
                  Shapes.$fReadShape11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Shapes.Shape>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Shapes.Shape>_R))))) -}
a70891e3593f81ed111926db922174f5
  $fReadShape11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Shape -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Shapes.Shape -> Text.ParserCombinators.ReadP.P b) ->
                 eta Shapes.Circle) -}
4af1b1b2c9ee6f8e87468ec56305c614
  $fReadShape12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Circle"#) -}
a70891e3593f81ed111926db922174f5
  $fReadShape13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
  {- Strictness: m,
     Unfolding: ((Shapes.$fReadShape15,
                  Shapes.$fReadShape14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Shapes.Shape>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Shapes.Shape>_R))))) -}
a70891e3593f81ed111926db922174f5
  $fReadShape14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Shape -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Shapes.Shape -> Text.ParserCombinators.ReadP.P b) ->
                 eta Shapes.Empty) -}
9dee30ccd47bfca0d9957881f536e30f
  $fReadShape15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Empty"#) -}
a70891e3593f81ed111926db922174f5
  $fReadShape16 :: Text.ParserCombinators.ReadP.P [Shapes.Shape]
  {- Unfolding: (GHC.Read.list1
                   @ Shapes.Shape
                   Shapes.$fReadShape2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Shape>_R))
                   GHC.Read.$fRead()5
                   @ [Shapes.Shape]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Shapes.Shape])) -}
a70891e3593f81ed111926db922174f5
  $fReadShape2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Shapes.Shape
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Shapes.Shape
                   Shapes.$fReadShape3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Shapes.Shape>_R))) -}
a70891e3593f81ed111926db922174f5
  $fReadShape3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Shapes.Shape
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2 @ Shapes.Shape Shapes.$fReadShape4 eta) -}
a70891e3593f81ed111926db922174f5
  $fReadShape4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
                   Shapes.$fReadShape13
                   Shapes.$fReadShape5) -}
a70891e3593f81ed111926db922174f5
  $fReadShape5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
                   Shapes.$fReadShape10
                   Shapes.$fReadShape6) -}
a70891e3593f81ed111926db922174f5
  $fReadShape6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
                   Shapes.$fReadShape7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape))) -}
a70891e3593f81ed111926db922174f5
  $fReadShape7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape)
  {- Strictness: m,
     Unfolding: ((Shapes.$fReadShape9,
                  Shapes.$fReadShape8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Shapes.Shape>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Shapes.Shape>_R))))) -}
a70891e3593f81ed111926db922174f5
  $fReadShape8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Shapes.Shape -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Shapes.Shape -> Text.ParserCombinators.ReadP.P b) ->
                 eta Shapes.Square) -}
528217f3f9e0d481911893023b42e2ce
  $fReadShape9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Square"#) -}
a70891e3593f81ed111926db922174f5
  $fReadShape_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Shapes.Shape]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Shapes.Shape]
                   Shapes.$fReadShape16) -}
a70891e3593f81ed111926db922174f5
  $fReadShape_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Shapes.Shape]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadShape1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Shapes.Shape]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Shapes.Shape]>_R))) -}
a70891e3593f81ed111926db922174f5
  $fReadShape_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Shapes.Shape
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Shapes.$fReadShape2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Shapes.Shape>_R)) -}
a70891e3593f81ed111926db922174f5
  $fReadShape_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Shapes.Shape
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Shapes.Shape
                   ((GHC.Read.parens1
                       @ Shapes.Shape
                       Shapes.$fReadShape3
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Shapes.Shape>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Shapes.Shape>_R)
                      @ Shapes.Shape
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Shapes.Shape))) -}
a70891e3593f81ed111926db922174f5
  $fShowShape :: GHC.Show.Show Shapes.Shape
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Shapes.Shape
                  Shapes.$fShowShape_$cshowsPrec
                  Shapes.$fShowShape_$cshow
                  Shapes.$fShowShape_$cshowList -}
a70891e3593f81ed111926db922174f5
  $fShowShape_$cshow :: Shapes.Shape -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Shapes.Shape) ->
                 case x of wild {
                   Shapes.Empty -> Shapes.$fReadShape15
                   Shapes.Circle -> Shapes.$fReadShape12
                   Shapes.Square -> Shapes.$fReadShape9 }) -}
a70891e3593f81ed111926db922174f5
  $fShowShape_$cshowList :: [Shapes.Shape] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Shapes.Shape
                   Shapes.$w$cshowsPrec) -}
a70891e3593f81ed111926db922174f5
  $fShowShape_$cshowsPrec ::
    GHC.Types.Int -> Shapes.Shape -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Shapes.Shape)
                   (w2 :: GHC.Base.String) ->
                 Shapes.$w$cshowsPrec w1 w2) -}
f7232fecaf5fe8821357cfd87192c87d
  $tc'Circle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4142175995223717761##
                   13283230786613771955##
                   Shapes.$trModule
                   Shapes.$tc'Circle1) -}
3f6e8f629afd164c132175aee6383d53
  $tc'Circle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Circle"#) -}
aec754c03aad587187833a4addf8b80b
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3195375847419472585##
                   10849794876299215685##
                   Shapes.$trModule
                   Shapes.$tc'Empty1) -}
0902c92ca112cb5ec52fd297be9921de
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
18d874cea719a54521de9d031a872167
  $tc'Square :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6477060361835723119##
                   10017143134300875493##
                   Shapes.$trModule
                   Shapes.$tc'Square1) -}
8671b006c6490823172988a632cc25e6
  $tc'Square1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Square"#) -}
585cc9d72b6da026bebd8f0811410d63
  $tcShape :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11423593888779627928##
                   3765881125842586955##
                   Shapes.$trModule
                   Shapes.$tcShape1) -}
5aa73ef6ad40a4be3533a66fdaeb40da
  $tcShape1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Shape"#) -}
efd3091fc8d3ce9b55c0234b1c7566c1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Shapes.$trModule2
                   Shapes.$trModule1) -}
2aa26a2792df3e76b9f5d59535ef9abb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Shapes"#) -}
950438b90ba147d1a91603055b41721a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
a70891e3593f81ed111926db922174f5
  $w$cshowsPrec :: Shapes.Shape -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Shapes.Shape) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Shapes.Empty
                   -> GHC.Base.++ @ GHC.Types.Char Shapes.$fReadShape15 w1
                   Shapes.Circle
                   -> GHC.Base.++ @ GHC.Types.Char Shapes.$fReadShape12 w1
                   Shapes.Square
                   -> GHC.Base.++ @ GHC.Types.Char Shapes.$fReadShape9 w1 }) -}
a70891e3593f81ed111926db922174f5
  data Shape = Empty | Circle | Square
instance [safe] GHC.Read.Read [Shapes.Shape] = Shapes.$fReadShape
instance [safe] GHC.Show.Show [Shapes.Shape] = Shapes.$fShowShape
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

